# -*- coding: utf-8 -*-
"""CarbonFootprint.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XH6ydrVhizoXrj__OA6Lg4wFV8fW635m
"""

import numpy as np
import matplotlib.pyplot as plt
from typing import Dict, Tuple

class CarbonFootprintModel:
    """
    Simplified Carbon Footprint Mathematical Model

    Solves: dC/dt = Σ[Ei × Ai(t) × Fi(t)]
    """

    def __init__(self, emission_sources: Dict, initial_footprint: float = 0.0):
        self.emission_sources = emission_sources
        self.C0 = initial_footprint
        self.E = np.array([source['emission_factor'] for source in emission_sources.values()])

    def activity_profile(self, t: float, source_name: str) -> float:
        """Calculate activity level at time t"""
        source = self.emission_sources[source_name]
        profile = source['activity_profile']

        if profile['type'] == 'constant':
            return profile['value']
        elif profile['type'] == 'linear':
            return profile['initial'] + profile['slope'] * t
        elif profile['type'] == 'exponential':
            return profile['initial'] * np.exp(profile['growth_rate'] * t)
        elif profile['type'] == 'seasonal':
            return (profile['mean'] +
                   profile['amplitude'] * np.sin(2 * np.pi * t + profile['phase']))
        else:
            return profile['value']

    def efficiency_factor(self, t: float, source_name: str) -> float:
        """Calculate efficiency factor at time t"""
        source = self.emission_sources[source_name]
        if 'efficiency' not in source:
            return 1.0

        eff = source['efficiency']
        if eff['type'] == 'constant':
            return eff['value']
        elif eff['type'] == 'improving':
            return eff['initial'] * (1 + t)**(-eff['rate'])
        else:
            return 1.0

    def emission_rate(self, t: float, C: float) -> float:
        """Calculate total emission rate: dC/dt"""
        total_rate = 0.0
        for i, source_name in enumerate(self.emission_sources.keys()):
            A_i = self.activity_profile(t, source_name)
            F_i = self.efficiency_factor(t, source_name)
            total_rate += self.E[i] * A_i * F_i
        return total_rate

    def solve_rk4(self, t_span: Tuple[float, float], dt: float = 0.01) -> Tuple[np.ndarray, np.ndarray]:
        """Solve using 4th-order Runge-Kutta method"""
        t_start, t_end = t_span
        n_steps = int((t_end - t_start) / dt) + 1

        t = np.linspace(t_start, t_end, n_steps)
        C = np.zeros(n_steps)
        C[0] = self.C0

        # RK4 integration
        for i in range(n_steps - 1):
            t_curr = t[i]
            C_curr = C[i]

            k1 = self.emission_rate(t_curr, C_curr)
            k2 = self.emission_rate(t_curr + dt/2, C_curr + dt*k1/2)
            k3 = self.emission_rate(t_curr + dt/2, C_curr + dt*k2/2)
            k4 = self.emission_rate(t_curr + dt, C_curr + dt*k3)

            C[i+1] = C_curr + (dt/6) * (k1 + 2*k2 + 2*k3 + k4)

        return t, C

    def analytical_constant(self, t_span: Tuple[float, float]) -> Tuple[np.ndarray, np.ndarray]:
        """Analytical solution for constant activities"""
        t_start, t_end = t_span
        t = np.linspace(t_start, t_end, 100)

        # Calculate constant emission rate
        E_total = sum(self.E[i] * self.activity_profile(0, name) * self.efficiency_factor(0, name)
                     for i, name in enumerate(self.emission_sources.keys()))

        C = self.C0 + E_total * (t - t_start)
        return t, C

    def plot_results(self, t_span: Tuple[float, float]):
        """Plot carbon footprint evolution"""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

        # Solve numerically
        t_num, C_num = self.solve_rk4(t_span)
        ax1.plot(t_num, C_num, 'b-', linewidth=2, label='RK4 Solution')

        # Try analytical solution for comparison
        try:
            t_ana, C_ana = self.analytical_constant(t_span)
            ax1.plot(t_ana, C_ana, 'r--', linewidth=2, label='Analytical (Constant)')
        except:
            pass

        ax1.set_xlabel('Time')
        ax1.set_ylabel('Carbon Footprint (kg CO₂)')
        ax1.set_title('Carbon Footprint Evolution')
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # Plot emission rates
        t_fine = np.linspace(t_span[0], t_span[1], 200)
        rates = [self.emission_rate(t_val, 0) for t_val in t_fine]
        ax2.plot(t_fine, rates, 'g-', linewidth=2)
        ax2.set_xlabel('Time')
        ax2.set_ylabel('Emission Rate (kg CO₂/time)')
        ax2.set_title('Emission Rate vs Time')
        ax2.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.show()

    def summary(self, t_span: Tuple[float, float]):
        """Print model summary"""
        t, C = self.solve_rk4(t_span)

        print("Carbon Footprint Model Summary")
        print("=" * 40)
        print(f"Initial footprint: {self.C0:.1f} kg CO₂")
        print(f"Final footprint: {C[-1]:.1f} kg CO₂")
        print(f"Total emissions: {C[-1] - self.C0:.1f} kg CO₂")
        print(f"Average rate: {(C[-1] - self.C0)/(t_span[1] - t_span[0]):.2f} kg CO₂/time")

        print(f"\nEmission Sources:")
        for i, (name, source) in enumerate(self.emission_sources.items()):
            avg_activity = np.mean([self.activity_profile(t_val, name) for t_val in t])
            avg_efficiency = np.mean([self.efficiency_factor(t_val, name) for t_val in t])
            contribution = self.E[i] * avg_activity * avg_efficiency
            print(f"  {name}: {contribution:.2f} kg CO₂/time (avg)")


# Example usage
def create_example():
    """Create example model"""
    sources = {
        'transportation': {
            'emission_factor': 2.3,  # kg CO₂/km
            'activity_profile': {
                'type': 'seasonal',
                'mean': 1000,        # km/month
                'amplitude': 200,    # seasonal variation
                'phase': 0
            },
            'efficiency': {
                'type': 'improving',
                'initial': 1.0,
                'rate': 0.05        # 5% improvement rate
            }
        },
        'energy': {
            'emission_factor': 0.5,  # kg CO₂/kWh
            'activity_profile': {
                'type': 'exponential',
                'initial': 2000,     # kWh/month
                'growth_rate': 0.02  # 2% growth/month
            }
        },
        'manufacturing': {
            'emission_factor': 12.0,  # kg CO₂/unit
            'activity_profile': {
                'type': 'constant',
                'value': 50          # units/month
            }
        }
    }

    return CarbonFootprintModel(sources, initial_footprint=500.0)


def main():
    """Main demonstration"""
    print("Carbon Footprint Mathematical Model")
    print("Implementing: dC/dt = Σ[Ei × Ai(t) × Fi(t)]\n")

    # Create model
    model = create_example()

    # Solve over 2 years
    t_span = (0, 24)  # months

    # Generate summary
    model.summary(t_span)

    # Plot results
    model.plot_results(t_span)


if __name__ == "__main__":
    main()