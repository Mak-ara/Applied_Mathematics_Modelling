# -*- coding: utf-8 -*-
"""PopulationGrowthModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XH6ydrVhizoXrj__OA6Lg4wFV8fW635m
"""

import numpy as np
import matplotlib.pyplot as plt

class LogisticGrowthModel:
    """Complete implementation of logistic growth model"""

    def __init__(self, r, K, P0):
        self.r = r                          # Intrinsic growth rate
        self.K = K                          # Carrying capacity
        self.P0 = P0                        # Initial population
        self.A = (K - P0) / P0             # Integration constant

    def population(self, t):
        """Analytical solution: P(t) = K/(1 + Ae^(-rt))"""
        return self.K / (1 + self.A * np.exp(-self.r * t))

    def growth_rate(self, t):
        """Instantaneous growth rate: dP/dt = rP(1-P/K)"""
        P = self.population(t)
        return self.r * P * (1 - P/self.K)

    def time_to_population(self, target_P):
        """Time to reach target population"""
        if target_P >= self.K or target_P <= self.P0:
            return None
        return -np.log((self.K/target_P - 1) / self.A) / self.r

    def plot_results(self, t_max=30):
        """Create plots of population dynamics"""
        t = np.linspace(0, t_max, 500)
        P = self.population(t)
        growth_rates = self.growth_rate(t)

        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

        # Population vs Time
        ax1.plot(t, P, 'b-', linewidth=2, label='Population')
        ax1.axhline(y=self.K, color='r', linestyle='--', alpha=0.7, label=f'Carrying Capacity ({self.K})')
        ax1.axhline(y=self.K/2, color='g', linestyle=':', alpha=0.7, label='Inflection Point')
        ax1.set_xlabel('Time')
        ax1.set_ylabel('Population')
        ax1.set_title('Logistic Population Growth')
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # Growth Rate vs Population
        ax2.plot(P, growth_rates, 'purple', linewidth=2)
        ax2.axvline(x=self.K/2, color='g', linestyle=':', alpha=0.7, label='Max Growth Rate')
        ax2.set_xlabel('Population')
        ax2.set_ylabel('Growth Rate')
        ax2.set_title('Phase Plot')
        ax2.legend()
        ax2.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.show()

# Example: Deer Population Recovery
if __name__ == "__main__":
    print("Logistic Growth Model - Deer Population Example")
    print("="*50)

    # Create model
    model = LogisticGrowthModel(r=0.12, K=800, P0=50)

    print(f"Parameters: r={model.r}, K={model.K}, Pâ‚€={model.P0}")
    print(f"Integration constant A = {model.A:.2f}")

    # Key calculations
    years = [5, 10, 15, 20]
    print(f"\nPopulation over time:")
    for year in years:
        pop = model.population(year)
        print(f"Year {year}: {pop:.0f} deer")

    # Time to milestones
    milestones = [200, 400, 600, 720]  # 720 = 90% of capacity
    print(f"\nTime to reach milestones:")
    for target in milestones:
        time_needed = model.time_to_population(target)
        if time_needed:
            print(f"{target} deer: {time_needed:.1f} years")

    # Maximum growth rate
    max_growth = model.r * model.K / 4
    inflection_time = np.log(model.A) / model.r
    print(f"\nMaximum growth rate: {max_growth:.1f} deer/year")
    print(f"Occurs at t = {inflection_time:.1f} years")

    # Create plots
    model.plot_results(t_max=35)